type UniswapFactory @entity { 
  # factory address
  id: ID! 

  # pair info
  pairCount: Int!
  pairs: [Pair]!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!

  # as reference for new day datas
  mostLiquidTokens: [TokenDayData!]!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  
  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedETH: BigDecimal

  # address of weth exchange if exists
  allPairs: [Pair!]

  # saved for historical refernce of most liquid pairs
  mostLiquidPairs: [PairDayData]!
}

type Pair @entity {
  # pair address
  id: ID!
  factory: UniswapFactory! @derivedFrom(field: "pairs")

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity 
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pair reserves and global

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "pair")

  # transaction stats
  mints: [Mint!] @derivedFrom(field: "pair")
  burns: [Burn!] @derivedFrom(field: "pair")
  swaps: [Swap!] @derivedFrom(field: "pair")
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  poolOwnership: BigDecimal
  liquidityTokenBalance: BigDecimal!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction! @derivedFrom(field: "mints")
  timestamp: BigInt! # need this to pull recent txns for specific token or pair 

  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction! @derivedFrom(field: "burns")
  timestamp: BigInt! # need this to pull recent txns for specific token or pair 

  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case 
  needsComplete: Boolean

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction! @derivedFrom(field: "swaps")
  timestamp: BigInt! # need this to pull recent txns for specific token or pair 

  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
  # daiPrice: BigDecimal! # price of ETH in DAI
}

# Data accumulated and condensed into day stats for all of Uniswap
type UniswapDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!

  totalVolumeETH: BigDecimal! # volume just on eth -i.e. we dont double count volume
  totalLiquidityETH: BigDecimal! # 2 * SUM(exchanges.ethLiquidity). Since tokenLiquiduity = ethLiquidity value, can just *2
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!

  # daily top tokens in liquidity
  maxStored: Int
  mostLiquidTokens: [TokenDayData!]!

  txCount: BigInt!
}


type PairHourData @entity {
  id: ID!
  hourIndex: Int!
  pair: Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!

  # top pairs that this token is in by liquidity
  maxStored: Int!
  mostLiquidPairs: [PairDayData!]!
}
